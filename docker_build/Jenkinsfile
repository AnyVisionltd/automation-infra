pipeline {
    agent { 
        label 'cicd'
    }
    options {
        timestamps()
        disableConcurrentBuilds()
        ansiColor('xterm')
        timeout(time: 3, unit: 'HOURS')
        buildDiscarder(logRotator(numToKeepStr:'100'))        
    }    
    libraries {
        lib('pipeline-library')
    }
    environment {
        SHORT_COMMIT = "${GIT_COMMIT[0..6]}"
        HELM_CATALOG_CRED = credentials('helm_catalog_services')
    }
    stages {
        stage('Initialize') {
            steps {
                script {
                    if (! env.SERVICE_NAME){
                        env.SERVICE_NAME = env.GIT_URL.replaceFirst(/^.*\/([^\/]+?).git$/, '$1')
                    }              
                    if (! env.EMAIL_TO){
                        env.EMAIL_TO = sh(returnStdout: true, script: "git show -s --pretty=%ae").trim()
                    }
                }
            }
        }
        stage('Build Container') {
            when {
                changeset "docker_build/**"
            }
            steps {
                script {
                    dir('docker_build'){
                        img = containerLib.build_container(SERVICE_NAME, SHORT_COMMIT)
                    }
                }
            }
        }
        stage('Promote Docker image to Training registry'){
            when {
                changeset "docker_build/**"
            }               
            steps {
                script {
                    dir('docker_build'){
                       image_tag=sh(returnStdout: true, script: "./version.sh").trim()
                       containerLib.push_container('anyvision-training', img, image_tag)
                    }
                    containerLib.push_container('anyvision-training', img, BRANCH_NAME)
                }
            }
        }
    }
    post {
        failure {
            script {
                echo "${currentBuild.result}, exiting now..."
                emailLib.send(EMAIL_TO)
            }
        }
        success { 
            cleanWs()
        }        
    }
}